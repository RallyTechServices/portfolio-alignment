<!DOCTYPE html>
<html>
<head>
    <title>Portfolio Alignment</title>
    <!--  (c) 2017 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Mon Jul 10 2023 15:52:54 GMT-0600 (Mountain Daylight Time) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Mon Jul 10 2023 15:52:54 GMT-0600 (Mountain Daylight Time)";
        var STORY    = "US1716";
        var BUILDER  = "kc683795";
        var CHECKSUM = 21389281069;
    </script>
    
    <script type="text/javascript" src="/apps/2.1/sdk.js"></script>
    <!-- our highcharts (needed so that we can add patterns) 
    <script type="text/javascript" src="/apps/2.1/lib/analytics/analytics-all.js"></script>
    -->
    
    
    <script type="text/javascript">
        Rally.onReady(function() {
            Ext.define("Rally.technicalservices.InfoLink",{extend:"Ext.Component",alias:"widget.tsinfolink",informationHtml:null,title:"Build Information",renderTpl:'<div class="tscenter"><div class="tsinfo">Data current as of {date}&nbsp;&nbsp;&nbsp;</div><div id="{id}-infolinkWrap" class="tsinfolink">&nbsp;i&nbsp;</div></div>',initComponent:function(){this.callParent(arguments)},onRender:function(){this.callParent(arguments),this.mon(this.el,"click",this.onClick,this)},_generateChecksum:function(a){var b,c=305419896;for(a=a.replace(/var CHECKSUM = .*;/,""),a=a.replace(/\s/g,""),b=0;b<a.length;b++)c+=a.charCodeAt(b)*b;return c},_checkChecksum:function(a){var b=this;Ext.Ajax.request({url:document.URL,params:{id:1},success:function(a){text=a.responseText,CHECKSUM&&CHECKSUM!==b._generateChecksum(text)&&(console.log("Checksums don't match!"),b.dialog&&b.dialog.add({xtype:"container",html:"Checksums do not match"}))}})},onClick:function(a){var b=this;this._checkChecksum(this);var c=[];this.informationHtml&&c.push({xtype:"container",html:this.informationHtml}),c.push({xtype:"container",html:"This unsupported app was created by the Rally Technical Services Team."}),APP_BUILD_DATE&&c.push({xtype:"container",html:"Build date/time: "+APP_BUILD_DATE}),this.dialog&&this.dialog.destroy(),this.dialog=Ext.create("Rally.ui.dialog.Dialog",{defaults:{padding:5,margin:5},closable:!0,draggable:!0,title:b.title,items:c}),this.dialog.show()}}),Ext.define("Rally.technicalservices.Logger",{constructor:function(a){Ext.apply(this,a)},log:function(a){var b="[ "+Ext.util.Format.date(new Date,"Y-m-d H:i:s.u")+" ]",c=[];c=Ext.Array.push(c,[b]),c=Ext.Array.push(c,Ext.Array.slice(arguments,0)),window.console&&console.log.apply(console,c)}}),Ext.define("Rally.technicalservices.preferences.Allocation",{logger:new Rally.technicalservices.Logger,noneText:"None",allocationsByRelease:null,project:null,constructor:function(a){this.allocationsByRelease={},Ext.apply(this,a)},getAllocationHash:function(a){return this.allocationsByRelease[this.getReleaseKey(a)]||this.defaultHash},getReleaseKey:function(a){if(a){var b=Rally.util.DateTime.fromIsoString(a.get("ReleaseStartDate")),c=Rally.util.DateTime.fromIsoString(a.get("ReleaseDate")),d=Rally.util.DateTime.toUtcIsoString(b),e=Rally.util.DateTime.toUtcIsoString(c),f=d+e+a.get("Name");return f.substring(0,254)}return"Unscheduled"},load:function(a,b,c){var d=Ext.create("Deft.Deferred");return this.allocationsByRelease={},this.defaultHash=this._buildDefaultHash(c),Rally.data.PreferenceManager.load({appID:a,project:this.project,filterByName:b,scope:this,success:function(a){a[b]&&(this.allocationsByRelease=Ext.JSON.decode(a[b]),this.logger.log("load preferences project",this.project,this.allocationsByRelease)),d.resolve()}}),d},update:function(a,b,c,d){this.allocationsByRelease[this.getReleaseKey(c)]=d;var e={};e[b]=Ext.JSON.encode(this.allocationsByRelease),Rally.data.PreferenceManager.update({appID:a,settings:e,project:this.project,scope:this,success:function(b,d){this.logger.log("_setTargetAllocationHash save preferences",b,d,"appId",a,"project",this.project,"settings",e,"release",this.getReleaseKey(c))}})},_cleanseHash:function(a){var b={},c=this.noneText;return _.each(values,function(a){a&&a.length>0&&(b[a]=0)}),b[c]=0,_.each(a,function(a,d){Ext.Array.contains(values,d)?b[d]=a:b[c]=(b[c]||0)+a}),b},_buildDefaultHash:function(a){var b={},c=_.without(a,"").length,d=c>0?100/c:100;return this.logger.log("_buildDefaultHash",a),Ext.each(a,function(a){a&&a.length>0&&(b[a]=d)}),b}}),Ext.define("Rally.technicalservices.PortfolioAlignmentSettings",{chartColors:["#2f7ed8","#8bbc21","#910000","#492970","#f28f43","#145499","#77a1e5","#c42525","#a6c96a","#7cb5ec","#434348","#90ed7d","#f7a35c","#8085e9","#aa1925","#f15c80","#e4d354","#2b908f","#f45b5b","#91e8e1","#1aadce","#4572A7","#AA4643","#89A54E","#80699B","#3D96AE","#DB843D","#92A8CD","#A47D7C","#B5CA92"],noneText:"None",noneColor:"#C0C0C0",otherText:"Other",otherColor:"#363636",persistAllocationsByProject:!0,categoryField:"InvestmentCategory",chartType:{targeted:{title:"Investment Planning Targets for {0}",field:"",display:!0,toolTip:"Desired investment allocation for {0} in the selected release.  <br/><br/>Click <b><i>Configure Targets...</i></b> to change the target allocations. Target Allocations will be saved to preferences for the selected Release and {1}.  Allocations must add up to 100%."},planned:{title:"Preliminary Feature Estimates",field:"PreliminaryEstimate",display:!0,dataFieldAttribute:"Value",toolTip:"Allocation of numeric Preliminary Estimate field values for all {0}s in the selected Release for the current project scope."},scheduled:{title:"Estimated User Story Points",field:"LeafStoryPlanEstimateTotal",display:!0,toolTip:"Sum of the plan estimates for all user story descendants of all {0}s in the selected release for the current project scope.<br/><br/>The portfolio items are for the current scope, the user stories included in the sum are independent of scope or associated release becuase they are retrieved from the LeafStoryPlanEstimateTotal field."},actual:{title:"Accepted User Story Points",field:"AcceptedLeafStoryPlanEstimateTotal",display:!0,toolTip:"Sum of the plan estimates for all currently accepted user story descendants of all {0}s in the selected release for the current project scope.<br/><br/>  The portfolio items are for the current scope, the user stories included in the sum are independent of scope or associated release becuase they are retrieved from the AcceptedLeafStoryPlanEstimateTotal field."}},legendColors:{},showDataLabels:!0,dataLabelDistance:1,dataLabelColor:"black",constructor:function(a){Ext.apply(this,a)},_getScopeText:function(){return this.persistAllocationsByProject===!0?"Project":"Workspace"},setLegendColors:function(a){a[this.noneText]=this.noneColor,this.legendColors=a},getLegendColor:function(a){return this.legendColors[a]||this.otherColor},getSeriesName:function(a){var b=a;return this.chartType[a]&&(b=this.chartType[a].title||a),b},getChartTypeDataField:function(a){return this.chartType[a]?this.chartType[a].field||null:null},getChartTypeDataFieldAttribute:function(a){return this.chartType[a]?this.chartType[a].dataFieldAttribute||null:null},getChartTitle:function(a){return this.chartType[a]?"targeted"==a?Ext.String.format(this.chartType[a].title||a,this._getScopeText()):this.chartType[a].title||a:a},getToolTip:function(a,b){var c=Ext.String.format(this.chartType[a].toolTip||Ext.String.format("No tool tip found.",a),b,this._getScopeText());return Ext.String.format("<b>{0}</b>:  {1}",this.getChartTitle(a),c)},getNoDataMessage:function(a){return'<span class="tscenter">No data to display</span>'}}),Ext.define("Rally.technicalservices.dialog.TargetAllocation",{extend:"Rally.ui.dialog.Dialog",autoShow:!0,draggable:!0,modal:!0,width:350,title:"Target Allocations",items:{xtype:"container",itemId:"dialog-body",padding:10},dockedItems:[{xtype:"toolbar",dock:"bottom",padding:"10",layout:{type:"hbox",pack:"center"},ui:"footer",items:[{xtype:"rallybutton",cls:"primary",itemId:"saveButton",text:"Save",disabled:!0},{xtype:"rallybutton",cls:"cancel secondary",text:"Cancel",itemId:"cancelButton"}]}],initComponent:function(){this.callParent(arguments),this.addEvents("allocationsupdate");var a=new RegExp("^__changed");_.each(this.targetAllocation,function(b,c){a.test(c)||this.down("#dialog-body").add({xtype:"rallynumberfield",fieldLabel:c,labelAlign:"right",labelWidth:150,value:b||0,minValue:0,maxValue:100,listeners:{scope:this,change:this._validate}})},this);var b="Settings change log not available.";this.targetAllocation.__changedBy&&this.targetAllocation.__changedBy.length>0&&this.targetAllocation.__changedOn&&this.targetAllocation.__changedOn.length>0&&(b=Ext.String.format("<br/><br/>Preferences for {2} changed by {0} on {1}",this.targetAllocation.__changedBy,this.targetAllocation.__changedOn||"<None>",this.releaseName)),this.title="Target Allocations for Workspace",(this.persistAllocationsByProject===!0||"true"==this.persistAllocationsByProject)&&(this.title="Target Allocations for Project"),this.down("#dialog-body").add({xtype:"container",html:b,style:{color:"#c0c0c0"}}),this._validate(),this.down("#saveButton").on("click",this._onSave,this),this.down("#cancelButton").on("click",this._onCancel,this)},_getUpdatedAllocations:function(){var a={},b=this.down("#dialog-body").query("rallynumberfield");return _.each(b,function(b){a[b.fieldLabel]=b.getValue()}),a.__changedBy=Rally.getApp().getContext().getUser().UserName,a.__changedOn=new Date,a},_validate:function(){var a=this.down("#dialog-body").query("rallynumberfield"),b=0;_.each(a,function(a){b+=a.getValue()});var c=100===b;return this.down("#saveButton").setDisabled(!c),c},_onSave:function(){var a=this._getUpdatedAllocations();this.fireEvent("allocationsupdate",a),this.destroy()},_onCancel:function(){this.destroy()}}),Ext.define("PortfolioAlignment",{extend:"Rally.app.TimeboxScopedApp",componentCls:"app",logger:new Rally.technicalservices.Logger,items:[{xtype:"container",itemId:"settings_box"},{xtype:"container",itemId:"ct-header",cls:"header",layout:{type:"hbox"}},{xtype:"container",itemId:"ct-display",layout:{type:"hbox"}},{xtype:"container",itemId:"ct-legend",layout:{type:"hbox",pack:"center"},padding:10},{xtype:"tsinfolink",height:20,renderData:{date:Rally.util.DateTime.formatWithDefaultDateTime(new Date)}}],scopeType:"release",comboboxConfig:{fieldLabel:"Release",labelAlign:"right",width:300,margin:10},cursor:"pointer",portfolioItemFetchFields:["Name","ObjectID","FormattedID","AcceptedLeafStoryPlanEstimateTotal","LeafStoryPlanEstimateTotal","PreliminaryEstimate","Value"],config:{defaultSettings:{persistAllocationsForProject:!1}},chartSettings:null,onNoAvailableTimeboxes:function(){this.logger.log("No available releases")},onScopeChange:function(a){this.logger.log("scope changed",a),this._updateApp()},_addComponents:function(){this.getHeader()||(this.add({xtype:"container",itemId:"ct-header",cls:"header",layout:{type:"hbox"}}),this.add({xtype:"container",itemId:"ct-display",layout:{type:"hbox"}}),this.add({xtype:"container",itemId:"ct-legend",flex:1,layout:{type:"hbox",pack:"center"}}),this.add({xtype:"tsinfolink",renderData:{date:Rally.util.DateTime.formatWithDefaultDateTime(new Date)}})),this.cbPortfolioItemType=this.getHeader().add({xtype:"rallyportfolioitemtypecombobox",itemId:"type-combo",fieldLabel:"Portfolio Item Type",labelWidth:100,labelAlign:"right",margin:10,storeConfig:{sorters:[{property:"Ordinal",direction:"ASC"}],filters:[{property:"Ordinal",value:0},{property:"Parent.Name",value:"Portfolio Item"}]},listeners:{scope:this,ready:function(a){var b=a.getStore().getAt(0);a.setValue(b.get(a.valueField))},change:this._updatePortfolioItemConfig},hidden:!0}),this.getHeader().add({xtype:"rallybutton",text:"Configure Targets...",scope:this,handler:this._buildTargetDialog,margin:10})},initComponent:function(){this.callParent([])},launch:function(){this.callParent(),this.isExternal()?this.showSettings(this.config):this.onSettingsUpdate(this.getSettings())},getHeader:function(){return this.down("container[cls=header]")},_updatePortfolioItemConfig:function(a){this.logger.log("_updatePortfolioItemConfig");var b=this.getContext().getWorkspace()._ref,c=this.chartSettings.categoryField;this.portfolioItemType=a.getRecord().get("TypePath"),this.portfolioItemDisplayName=a.getRecord().get(a.displayField),a.getRecord().get("Ordinal")>0||(this.logger.log("_loadCategories",this.portfolioItemType,c),Rally.data.wsapi.ModelFactory.getModel({type:this.portfolioItemType,context:{workspace:b},scope:this,success:function(a){var b=a.getField(c);b.getAllowedValueStore().load({fetch:["StringValue"],callback:function(a,b,d){if(console.log("callback",a,b,d),d){var e=_.map(a,function(a){return a.get("StringValue")}),f=0,g={};e.push(this.chartSettings.noneText),this.logger.log("AllowedValues ",e),Ext.each(e,function(a){a&&a.length>0&&(g[a]=this.chartSettings.chartColors[f++]),f==this.chartSettings.chartColors.length&&(f=0)},this),this.chartSettings.setLegendColors(g),this.targetFieldValues=e;var h=this.chartSettings.persistAllocationsByProject?this.getContext().getProjectRef():null;this.logger.log("project persistence settings",this.chartSettings.persistAllocationsByProject,h,this.getContext().getProjectRef()),this.allocationPreferences=Ext.create("Rally.technicalservices.preferences.Allocation",{noneText:this.noneText,project:h}),this.allocationPreferences.load(this.getAppId(),this.portfolioItemType,e).then({scope:this,success:function(){this._updateApp()}})}else{var i="Error retrieving allowed values for "+c+": "+b.error.errors[0];Rally.ui.notify.Notifier.showError({message:i})}},scope:this})}}))},_updateChart:function(a,b,c){var d="#"+a,e=this.down(d);e?this.down(d).removeAll():e=this.down("#ct-display").add({xtype:"container",itemId:a,flex:1,maxHeight:350});e.add({xtype:"rallychart",loadMask:!1,chartData:{series:b},chartConfig:c});e.setHeight(350)},_addLegend:function(){this.down("#ct-legend").removeAll();var a=[];_.each(this.chartSettings.legendColors,function(b,c){a.push({color:b,label:c})});var b=this.down("#ct-legend").add({xtype:"container",tpl:'<tpl for="."><div class="tslegend" style="background-color:{color}">&nbsp;&nbsp;</div><div class="tslegendtext">&nbsp;&nbsp;{label}</div><span class="tslegendspacer">&nbsp;</span></tpl>'});b.update(a)},_updateTargetChart:function(){this._updateChart("ct-target",[this._getTargetChartData()],this._getChartConfig("targeted"))},_updateApp:function(){var a=this.portfolioItemType,b=null,c=this._getTargetFieldValues();this.getContext().getTimeboxScope()&&(b=this.getContext().getTimeboxScope().getRecord()),this.logger.log("_updateApp PortfolioItem Type, Timebox, categories",a,b,c),a&&c&&(this.down("#ct-display").removeAll(),this._fetchData(a,b).then({scope:this,success:function(c){if(this.logger.log("_fetchData",c),c&&c.length>0)this._updateTargetChart(),this._addLegend(),this._updateChart("ct-planned",[this._getChartData(c,"planned")],this._getChartConfig("planned")),this._updateChart("ct-scheduled",[this._getChartData(c,"scheduled")],this._getChartConfig("scheduled")),this._updateChart("ct-actual",[this._getChartData(c,"actual")],this._getChartConfig("actual"));else{var d=b?b.get("Name"):"(No Release)";this.down("#ct-display").add({xtype:"container",html:Ext.String.format("No {0} data was found for the currently selected project ({1}) in {2}",a,this.getContext().getProject().Name,d),style:{textAlign:"center",fontSize:"12px"},flex:1}),Rally.ui.notify.Notifier.showWarning({message:"No "+a+" data was found for the currently selected project scope ("+this.getContext().getProject().Name+") and release."})}},failure:function(a){var b="Error fetching portfolio items:  "+a.error.errors[0];Rally.ui.notify.Notifier.showError({message:b}),this.down("#ct-display").add({xtype:"container",html:b,style:{textAlign:"center",fontSize:"12px",color:"red"},flex:1})}}))},_initCategoryDataHash:function(){var a={},b=this._getTargetFieldValues();return Ext.each(b,function(b){b&&b.length>0&&(a[b]=0)}),a[this.chartSettings.noneText]=0,a},_getChartData:function(a,b){var c=this._initCategoryDataHash(),d=(this._getTargetFieldValues(),this.chartSettings.categoryField),e=this.chartSettings.noneText,f=this.chartSettings.getChartTypeDataField(b),g=this.chartSettings.getChartTypeDataFieldAttribute(b);this.logger.log("_getChartData",f,g),Ext.each(a,function(a){var b=a.get(d)||e,h=a.get(f)||0;h&&g&&(h=h[g]||0),h>0&&(_.has(c,b)?c[b]+=h:this.logger.log("Category not valid",b,h))},this);var h=_.map(c,function(a,b){return{name:b,y:a,color:this.chartSettings.getLegendColor(b),visible:a>0}},this);return this.logger.log("_getChartData",this.chartSettings.getSeriesName(b),c,h),{type:"pie",name:this.chartSettings.getSeriesName(b),data:h,showInLegend:!1}},_fetchData:function(a,b){var c=Ext.create("Deft.Deferred"),d=this.portfolioItemFetchFields,e={workspace:this.getContext().getWorkspace()._ref,project:this.getContext().getProjectRef(),projectScopeUp:this.getContext().getProjectScopeUp(),projectScopeDown:this.getContext().getProjectScopeDown()},f=[{property:"Release",value:null}];b&&(f=[{property:"Release.Name",value:b.get("Name")},{property:"Release.ReleaseStartDate",value:b.get("ReleaseStartDate")},{property:"Release.ReleaseDate",value:b.get("ReleaseDate")}]),d.push(this.chartSettings.categoryField),this.logger.log("_fetchData",d,e);var g=Ext.create("Rally.data.wsapi.Store",{model:a,fetch:d,context:e,filters:f,limit:"Infinity",pageSize:2e3});return g.load({callback:function(a,b,d){this.logger.log("Portfolio item data load ",d,a,b),d?c.resolve(a):c.reject(b)},scope:this}),c},_getTargetChartData:function(){var a=this._getTargetFieldValues(),b=[];Ext.Array.contains(a,this.chartSettings.noneText)||a.push(this.chartSettings.noneText);var c=this.getContext().getTimeboxScope().getRecord(),d=this.allocationPreferences.getAllocationHash(c);return Ext.each(a,function(a){if(a&&a.length>0){var c=d[a]||0;b.push({name:a,y:c,color:this.chartSettings.getLegendColor(a)})}},this),{type:"pie",name:this.chartSettings.getChartTitle("targeted"),data:b}},_getChartConfig:function(a){var b=this.chartSettings.getChartTitle(a),c=this.chartSettings.getToolTip(a,this.portfolioItemDisplayName),d=this.chartSettings.getNoDataMessage(a);return{chart:{plotBackgroundColor:null,plotBorderWidth:null,plotShadow:!1,marginBottom:0,marginTop:0,spacingBottom:0,events:{load:function(){var a=this;a.title.on("mouseover",function(a){Ext.create("Rally.ui.tooltip.ToolTip",{target:a.target,html:c,autoShow:!0})});var b=0;if(a.series&&a.series[0]&&a.series[0].data&&(b=Ext.Array.sum(_.map(a.series[0].data,function(a){return a.y}))),0>=b){var e=.33*a.plotWidth,f=.4*a.plotHeight;a.renderer.text(d,e,f).add()}}}},title:{text:b},tooltip:{pointFormat:"{point.y:.1f} (<b>{point.percentage:.1f}%</b>)"},plotOptions:{pie:{size:"75%",center:["50%","50%"],allowPointSelect:!0,dataLabels:{enabled:this.chartSettings.showDataLabels,distance:this.chartSettings.dataLabelDistance,color:this.chartSettings.dataLabelColor,crop:!1,overflow:"none",formatter:function(){return this.percentage>0?this.percentage.toFixed(1)+"%":null}},showInLegend:!1}}}},_getTargetFieldValues:function(){return this.targetFieldValues&&this.targetFieldValues.length>0?this.targetFieldValues:null},_buildTargetDialog:function(){var a=this.getContext().getTimeboxScope().getRecord(),b=this.getAppId();this.logger.log("_buildTargetDialog",a);var c="Unscheduled";a&&(c=a.get("Name")),console.log("releaseName",c,"persistAllocationsByProject",this.chartSettings.persistAllocationsByProject),Ext.create("Rally.technicalservices.dialog.TargetAllocation",{releaseName:c,persistAllocationsByProject:this.chartSettings.persistAllocationsByProject,targetAllocation:this.allocationPreferences.getAllocationHash(a),listeners:{scope:this,allocationsupdate:function(c){this.logger.log("allocations updated",c),this.allocationPreferences.update(b,this.portfolioItemType,a,c),this._updateTargetChart()}}})},getSettingsFields:function(){return[{name:"persistAllocationsForProject",xtype:"rallycheckboxfield",fieldLabel:"Persist Allocations for Project",labelAlign:"right",labelWidth:200}]},isExternal:function(){return"undefined"==typeof this.getAppId()},showSettings:function(a){return this._appSettings=Ext.create("Rally.app.AppSettings",Ext.apply({settings:this.getSettings(),defaultSettings:this.getDefaultSettings(),context:this.getContext(),settingsScope:this.settingsScope,autoScroll:!0,fields:this.getSettingsFields()},a)),this._appSettings.on("cancel",this.hideSettings,this),this._appSettings.on("save",this._onSettingsSaved,this),this.isExternal()?void 0==this.down("#settings_box").getComponent(this._appSettings.id)&&this.down("#settings_box").add(this._appSettings):(this.hide(),this.up().add(this._appSettings)),this._appSettings},_onSettingsSaved:function(a){Ext.apply(this.settings,a),this.hideSettings(),this.onSettingsUpdate(a)},onSettingsUpdate:function(a){this.chartSettings=Ext.create("Rally.technicalservices.PortfolioAlignmentSettings",{persistAllocationsByProject:this.getSetting("persistAllocationsForProject")}),this._addComponents()}});
            
               Rally.launchApp('PortfolioAlignment', {
                   name: 'Portfolio Alignment'
               });
        });
    </script>
    
    <style type="text/css">

.app {

}
.tsinfolink {
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-right: 5px;
    cursor: pointer;
    display: inline-block;
}
.tsinfo {
    text-align: center;
    color: white;
    color: #C0C0C0;
    display: inline-block;
}

.tslegend {
    width: 14px;
    height: 14px;
    border-radius: 3px;
    text-align: center;
    color: white;
    border-style: solid;
    border-width: 1px;
    display: inline-block;
}

.tslegendtext {
    font-family: 'Lucida Grande', 'Lucida Sans Unicode', Verdana, Arial, Helvetica, sans-serif;
    font-size: '14px'!important;
    color: #274b6d;
    display: inline
}
.tslegendspacer {
    padding: 15px;
    display: inline;
}
.tscenter {
    width: 100%;
    text-align: center;
}
    </style>

</head>
<body></body>
</html>